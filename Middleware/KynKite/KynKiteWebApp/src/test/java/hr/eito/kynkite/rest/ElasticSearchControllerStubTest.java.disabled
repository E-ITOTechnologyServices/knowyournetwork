/**
 * 
 */
package hr.eito.kynkite.rest;

import java.net.URI;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.ServerConnector;
import org.eclipse.jetty.webapp.WebAppContext;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;


/**
 * @author Danijel Soltic
 *
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/config/app-config.xml" })
@ActiveProfiles("test")
public class ElasticSearchControllerStubTest extends AbstractElasticSearchController {

	private static Server server;
	private static URI serverUri;

	@BeforeClass
	public static void startJetty() throws Exception{
		// Create Server
		server = new Server();
		ServerConnector connector = new ServerConnector(server);
		connector.setPort(0); // auto-bind to available port
		server.addConnector(connector);

		WebAppContext webapp1 = new WebAppContext();
		webapp1.setResourceBase("src/main/webapp");
		webapp1.setContextPath("/");
		webapp1.setDefaultsDescriptor("src/main/webapp/WEB-INF/web.xml");

		server.setHandler(webapp1);

		// Start Server
		server.start();

		// Determine Base URI for Server
		String host = connector.getHost();
		if (host == null)
		{
			host = "localhost";
		}
		int port = connector.getLocalPort();
		serverUri = new URI(String.format("http://%s:%d/",host,port));
	}
	

	@AfterClass
	public static void stopJetty()
	{
		try
		{
			server.stop();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	@Override
	URI getServerUri() {
		return serverUri;
	}
	
}
